<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImagineBookStore.Core</name>
    </assembly>
    <members>
        <member name="T:ImagineBookStore.Core.Extensions.CustomResultFactory">
            <summary>
            Implements an <see cref="T:SharpGrip.FluentValidation.AutoValidation.Mvc.Results.IFluentValidationAutoValidationResultFactory"/> to create custom action results for FluentValidation auto-validation.
            </summary>
        </member>
        <member name="M:ImagineBookStore.Core.Extensions.CustomResultFactory.CreateActionResult(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.ValidationProblemDetails)">
            <summary>
            Creates a custom <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> for FluentValidation auto-validation errors.
            </summary>
            <param name="context">The action executing context.</param>
            <param name="validationProblemDetails">The validation problem details containing validation errors.</param>
            <returns>A <see cref="T:Microsoft.AspNetCore.Mvc.BadRequestObjectResult"/> with a custom error response containing validation errors of type <see cref="T:ImagineBookStore.Model.Utilities.ErrorResult"/>.</returns>
        </member>
        <member name="T:ImagineBookStore.Core.Extensions.PaginationExtensions">
            <summary>
            Provides extension methods for IQueryable and IEnumerable to handle pagination.
            </summary>
        </member>
        <member name="M:ImagineBookStore.Core.Extensions.PaginationExtensions.ToPaginatedListAsync``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Returns a paginated list.
            </summary>
            <typeparam name="T">Type of items in the list.</typeparam>
            <param name="source">An IQueryable instance to apply pagination to.</param>
            <param name="pageIndex">Page number that starts with zero.</param>
            <param name="pageSize">Size of each page.</param>
            <returns>Returns a paginated list.</returns>
        </member>
        <member name="M:ImagineBookStore.Core.Extensions.PaginationExtensions.CreateAsync``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Creates a paginated list asynchronously.
            </summary>
            <typeparam name="T">Type of items in the list.</typeparam>
            <param name="source">An IQueryable instance to apply pagination to.</param>
            <param name="pageIndex">Page number that starts with zero.</param>
            <param name="pageSize">Size of each page.</param>
            <returns>A paginated list.</returns>
        </member>
        <member name="M:ImagineBookStore.Core.Extensions.PaginationExtensions.ToPaginatedList``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Returns a paginated list from an IEnumerable.
            </summary>
            <typeparam name="T">Type of items in the list.</typeparam>
            <param name="source">An IEnumerable instance to apply pagination to.</param>
            <param name="pageIndex">Page number that starts with zero.</param>
            <param name="pageSize">Size of each page.</param>
            <returns>Returns a paginated list.</returns>
        </member>
        <member name="M:ImagineBookStore.Core.Extensions.PaginationExtensions.ToPaginatedListAsync``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Returns a paginated list asynchronously with a fixed page size of 15.
            </summary>
            <typeparam name="T">Type of items in the list.</typeparam>
            <param name="source">An IQueryable instance to apply pagination to.</param>
            <param name="pageIndex">Page number that starts with zero.</param>
            <returns>Returns a paginated list.</returns>
            <remarks>This functionality may not work in SQL Compact 3.5</remarks>
        </member>
        <member name="M:ImagineBookStore.Core.Extensions.PaginationExtensions.Create``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Creates a paginated list.
            </summary>
            <typeparam name="T">Type of items in the list.</typeparam>
            <param name="source">An IEnumerable instance to apply pagination to.</param>
            <param name="pageIndex">Page number that starts with zero.</param>
            <param name="pageSize">Size of each page.</param>
            <returns>Returns a paginated list.</returns>
        </member>
        <member name="T:ImagineBookStore.Core.Extensions.ServiceExtensions">
            <summary>
            Extension methods for configuring services in the application.
            </summary>
        </member>
        <member name="M:ImagineBookStore.Core.Extensions.ServiceExtensions.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Boolean)">
            <summary>
            Configures services for the application, including database, validation, authentication, authorization, HTTP context, caching, and various services.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to add services to.</param>
            <param name="configuration">The configuration for the application.</param>
            <param name="isProduction">A flag indicating whether the application is running in a production environment.</param>
            <returns>The modified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> for method chaining.</returns>
        </member>
        <member name="T:ImagineBookStore.Core.Interfaces.IAuthService">
            <summary>
            Interface for authentication services.
            </summary>
        </member>
        <member name="M:ImagineBookStore.Core.Interfaces.IAuthService.CreateUser(ImagineBookStore.Model.Input.RegisterModel)">
            <summary>
            Creates a new user with the provided registration details.
            </summary>
            <param name="model">The registration model containing user details.</param>
            <returns>A task representing the asynchronous operation with the result of the user creation.
            The result type is <see cref="T:ImagineBookStore.Model.Utilities.Result`1"/> where T is <see cref="T:ImagineBookStore.Model.View.AuthDataView"/>.</returns>
        </member>
        <member name="M:ImagineBookStore.Core.Interfaces.IAuthService.AuthenticateUser(ImagineBookStore.Model.Input.LoginModel)">
            <summary>
            Authenticates a user with the provided login credentials.
            </summary>
            <param name="model">The login model containing user credentials.</param>
            <returns>A task with the authentication result: <see cref="T:ImagineBookStore.Model.Utilities.Result`1"/> where T is <see cref="T:ImagineBookStore.Model.View.AuthDataView"/>.</returns>
        </member>
        <member name="M:ImagineBookStore.Core.Interfaces.IAuthService.Logout(System.String)">
            <summary>
            Logs out the user with the specified reference.
            </summary>
            <param name="userReference">The reference of the user to log out.</param>
            <returns>A task with the logout result: <see cref="T:ImagineBookStore.Model.Utilities.Result"/>.</returns>
        </member>
        <member name="T:ImagineBookStore.Core.Interfaces.IBookService">
            <summary>
            Interface for book-related services.
            </summary>
        </member>
        <member name="M:ImagineBookStore.Core.Interfaces.IBookService.AddBook(ImagineBookStore.Model.Input.BookModel)">
            <summary>
            Adds a new book with the provided details.
            </summary>
            <param name="model">The book model containing book details.</param>
            <returns>A task with the result of the book addition: <see cref="T:ImagineBookStore.Model.Utilities.Result`1"/> where T is <see cref="T:ImagineBookStore.Model.View.BookView"/>.</returns>
        </member>
        <member name="M:ImagineBookStore.Core.Interfaces.IBookService.DeleteBook(System.Int32)">
            <summary>
            Deletes the book with the specified ID.
            </summary>
            <param name="bookId">The ID of the book to delete.</param>
            <returns>A task with the result of the book deletion: <see cref="T:ImagineBookStore.Model.Utilities.Result"/>.</returns>
        </member>
        <member name="M:ImagineBookStore.Core.Interfaces.IBookService.GetBook(System.Int32)">
            <summary>
            Retrieves details of the book with the specified ID.
            </summary>
            <param name="bookId">The ID of the book to retrieve.</param>
            <returns>A task with the result of retrieving the book details: <see cref="T:ImagineBookStore.Model.Utilities.Result`1"/> where T is <see cref="T:ImagineBookStore.Model.View.BookView"/>.</returns>
        </member>
        <member name="M:ImagineBookStore.Core.Interfaces.IBookService.ListBooks(ImagineBookStore.Model.Input.PagingOptionModel)">
            <summary>
            Lists books based on the provided paging options.
            </summary>
            <param name="request">The paging options for listing books.</param>
            <returns>A task with the result of listing books: <see cref="T:ImagineBookStore.Model.Utilities.Result`1"/> where T is a list of <see cref="T:ImagineBookStore.Model.View.BookView"/>.</returns>
        </member>
        <member name="M:ImagineBookStore.Core.Interfaces.IBookService.UpdateBook(System.Int32,ImagineBookStore.Model.Input.BookModel)">
            <summary>
            Updates the book with the specified ID using the provided details.
            </summary>
            <param name="bookId">The ID of the book to update.</param>
            <param name="model">The book model containing updated details.</param>
            <returns>A task with the result of updating the book: <see cref="T:ImagineBookStore.Model.Utilities.Result`1"/> where T is <see cref="T:ImagineBookStore.Model.View.BookView"/>.</returns>
        </member>
        <member name="T:ImagineBookStore.Core.Interfaces.ICacheService">
            <summary>
            Interface for caching service operations.
            </summary>
        </member>
        <member name="M:ImagineBookStore.Core.Interfaces.ICacheService.AddToken(System.String,System.String,System.DateTime)">
            <summary>
            Adds a token to the cache with the specified key and expiration time.
            </summary>
            <param name="key">The key to identify the cached token.</param>
            <param name="value">The token value to be cached.</param>
            <param name="expiresAt">The expiration time for the cached token.</param>
        </member>
        <member name="M:ImagineBookStore.Core.Interfaces.ICacheService.GetToken(System.String)">
            <summary>
            Retrieves a token from the cache using the specified key.
            </summary>
            <param name="key">The key to identify the cached token.</param>
            <returns>A task representing the asynchronous operation with the cached token value.</returns>
        </member>
        <member name="M:ImagineBookStore.Core.Interfaces.ICacheService.RemoveToken(System.String)">
            <summary>
            Removes a token from the cache using the specified key.
            </summary>
            <param name="key">The key to identify the cached token to be removed.</param>
        </member>
        <member name="T:ImagineBookStore.Core.Interfaces.ICartService">
            <summary>
            Interface for shopping cart service operations.
            </summary>
        </member>
        <member name="M:ImagineBookStore.Core.Interfaces.ICartService.AddToCart(ImagineBookStore.Model.Input.CartModel)">
            <summary>
            Adds a book to the user's shopping cart.
            </summary>
            <param name="model">The cart model containing information about the book and quantity to add.</param>
            <returns>A task with the result of adding the book to the cart: <see cref="T:ImagineBookStore.Model.Utilities.Result"/>.</returns>
        </member>
        <member name="M:ImagineBookStore.Core.Interfaces.ICartService.ListCarts">
            <summary>
            Lists the items in the user's shopping cart.
            </summary>
            <returns>A task with the result of listing the items in the cart: <see cref="T:ImagineBookStore.Model.Utilities.Result`1"/> where T is <see cref="T:ImagineBookStore.Model.View.CartView"/>.</returns>
        </member>
        <member name="M:ImagineBookStore.Core.Interfaces.ICartService.RemoveFromCart(System.Int32)">
            <summary>
            Removes a book from the user's shopping cart.
            </summary>
            <param name="cartId">The ID of the cart item to remove.</param>
            <returns>A task with the result of removing the book from the cart: <see cref="T:ImagineBookStore.Model.Utilities.Result"/>.</returns>
        </member>
        <member name="T:ImagineBookStore.Core.Interfaces.IOrderService">
            <summary>
            Interface for order-related service operations.
            </summary>
        </member>
        <member name="M:ImagineBookStore.Core.Interfaces.IOrderService.AttemptPayment(System.Int32)">
            <summary>
            Attempts to process payment for the specified order.
            </summary>
            <param name="orderId">The ID of the order to attempt payment for.</param>
            <returns>A task with the result of the payment attempt: <see cref="T:ImagineBookStore.Model.Utilities.Result"/> where T is <see cref="T:ImagineBookStore.Model.View.PaymentRequestView"/>.</returns>
        </member>
        <member name="M:ImagineBookStore.Core.Interfaces.IOrderService.ConfirmPayment(System.Int32)">
            <summary>
            Confirms payment for the specified order.
            </summary>
            <param name="orderId">The ID of the order to confirm payment for.</param>
            <returns>A task with the result of confirming the payment: <see cref="T:ImagineBookStore.Model.Utilities.Result"/>.</returns>
        </member>
        <member name="M:ImagineBookStore.Core.Interfaces.IOrderService.GetOrderItems(System.Int32)">
            <summary>
            Gets the items of the specified order.
            </summary>
            <param name="orderId">The ID of the order to retrieve items for.</param>
            <returns>The result containing the order items: <see cref="T:ImagineBookStore.Model.Utilities.Result`1"/> where T is a list of <see cref="T:ImagineBookStore.Model.View.OrderItemView"/>.</returns>
        </member>
        <member name="M:ImagineBookStore.Core.Interfaces.IOrderService.ListOrders(ImagineBookStore.Model.Input.PagingOptionModel)">
            <summary>
            Lists orders based on the provided paging options.
            </summary>
            <param name="request">The paging options for listing orders.</param>
            <returns>A task with the result of listing orders: <see cref="T:ImagineBookStore.Model.Utilities.Result`1"/> where T is a list of <see cref="T:ImagineBookStore.Model.View.OrderView"/>.</returns>
        </member>
        <member name="M:ImagineBookStore.Core.Interfaces.IOrderService.PlaceOrder">
            <summary>
            Places a new order based on the items in the user's shopping cart.
            </summary>
            <returns>A task with the result of placing the order: <see cref="T:ImagineBookStore.Model.Utilities.Result`1"/> where T is <see cref="T:ImagineBookStore.Model.View.PaymentRequestView"/>.</returns>
        </member>
        <member name="T:ImagineBookStore.Core.Interfaces.ITokenGenerator">
            <summary>
            Defines the contract for generating and invalidating JWT tokens.
            </summary>
        </member>
        <member name="M:ImagineBookStore.Core.Interfaces.ITokenGenerator.GenerateJwtToken(ImagineBookStore.Model.App.User)">
            <summary>
            Generates a JWT token for the specified user.
            </summary>
            <param name="user">The user for whom the token is generated.</param>
            <returns>A task representing the asynchronous operation with the result containing the generated token. </returns>
        </member>
        <member name="M:ImagineBookStore.Core.Interfaces.ITokenGenerator.InvalidateToken(System.String)">
            <summary>
            Invalidates the JWT token for the specified user reference.
            </summary>
            <param name="userReference">The user reference for whom the token should be invalidated. See <see cref="T:System.String"/>.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:ImagineBookStore.Core.Middlewares.ErrorHandlerMiddleware">
            <summary>
            Middleware for handling errors and returning appropriate JSON responses.
            </summary>
        </member>
        <member name="M:ImagineBookStore.Core.Middlewares.ErrorHandlerMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{ImagineBookStore.Core.Middlewares.ErrorHandlerMiddleware})">
            <summary>
            Initializes a new instance of the <see cref="T:ImagineBookStore.Core.Middlewares.ErrorHandlerMiddleware"/> class.
            </summary>
            <param name="next">The next middleware in the pipeline.</param>
            <param name="logger">The logger for capturing error information.</param>
        </member>
        <member name="M:ImagineBookStore.Core.Middlewares.ErrorHandlerMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invokes the middleware to handle errors in the request pipeline.
            </summary>
            <param name="context">The HTTP context for the current request.</param>
        </member>
        <member name="T:ImagineBookStore.Core.Middlewares.JWTMiddleware">
            <summary>
            Middleware for handling JSON Web Token (JWT) authentication.
            </summary>
        </member>
        <member name="M:ImagineBookStore.Core.Middlewares.JWTMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Configuration.IConfiguration,ImagineBookStore.Core.Interfaces.ICacheService)">
            <summary>
            Initializes a new instance of the <see cref="T:ImagineBookStore.Core.Middlewares.JWTMiddleware"/> class.
            </summary>
            <param name="next">The next middleware in the pipeline.</param>
            <param name="configuration">The configuration instance for accessing application settings.</param>
            <param name="cacheService">The cache service for storing and retrieving tokens.</param>
        </member>
        <member name="M:ImagineBookStore.Core.Middlewares.JWTMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext,Microsoft.Extensions.Options.IOptions{ImagineBookStore.Model.Configurations.JwtConfig})">
            <summary>
            Invokes the middleware to handle JWT authentication in the request pipeline.
            </summary>
            <param name="context">The HTTP context for the current request.</param>
            <param name="jwtConfig">The configuration options for JWT.</param>
        </member>
        <member name="M:ImagineBookStore.Core.Middlewares.JWTMiddleware.IsAnonymous(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Checks if the current route or action is marked as anonymous (skipping JWT authentication).
            </summary>
            <param name="context">The HTTP context for the current request.</param>
            <returns>True if the current route or action is marked as anonymous; otherwise, false.</returns>
        </member>
        <member name="M:ImagineBookStore.Core.Middlewares.JWTMiddleware.AttachAccountToContext(Microsoft.AspNetCore.Http.HttpContext,System.String,ImagineBookStore.Model.Configurations.JwtConfig)">
            <summary>
            Validates the JWT token and attaches user information to the HTTP context.
            </summary>
            <param name="context">The HTTP context for the current request.</param>
            <param name="token">The JWT token extracted from the request headers.</param>
            <param name="jwtConfig">The configuration options for JWT.</param>
            <returns>True if JWT validation is successful and the user is attached to the context; otherwise, false.</returns>
        </member>
        <member name="T:ImagineBookStore.Core.Middlewares.UserSessionMiddleware">
            <summary>
            Middleware for extracting user session information from the current HTTP context.
            </summary>
        </member>
        <member name="M:ImagineBookStore.Core.Middlewares.UserSessionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:ImagineBookStore.Core.Middlewares.UserSessionMiddleware"/> class.
            </summary>
            <param name="next">The next middleware in the pipeline.</param>
        </member>
        <member name="M:ImagineBookStore.Core.Middlewares.UserSessionMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext,ImagineBookStore.Model.Input.UserSession)">
            <summary>
            Invokes the middleware to extract user session information from the current HTTP context.
            </summary>
            <param name="context">The HTTP context for the current request.</param>
            <param name="session">The user session instance to store extracted information.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:ImagineBookStore.Core.Services.AuthService">
            <summary>
            Implementation of the authentication services.
            </summary>
        </member>
        <member name="M:ImagineBookStore.Core.Services.AuthService.#ctor(ImagineBookStore.Model.App.BookStoreContext,ImagineBookStore.Core.Interfaces.ITokenGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:ImagineBookStore.Core.Services.AuthService"/> class.
            </summary>
            <param name="context">The database context for user information. See <see cref="T:ImagineBookStore.Model.App.BookStoreContext"/>.</param>
            <param name="tokenGenerator">The token generator for creating and invalidating user tokens. See <see cref="T:ImagineBookStore.Core.Interfaces.ITokenGenerator"/>.</param>
        </member>
        <member name="M:ImagineBookStore.Core.Services.AuthService.AuthenticateUser(ImagineBookStore.Model.Input.LoginModel)">
            <inheritdoc cref="M:ImagineBookStore.Core.Interfaces.IAuthService.AuthenticateUser(ImagineBookStore.Model.Input.LoginModel)"/>
        </member>
        <member name="M:ImagineBookStore.Core.Services.AuthService.CreateUser(ImagineBookStore.Model.Input.RegisterModel)">
            <inheritdoc cref="M:ImagineBookStore.Core.Interfaces.IAuthService.CreateUser(ImagineBookStore.Model.Input.RegisterModel)"/>
        </member>
        <member name="M:ImagineBookStore.Core.Services.AuthService.Logout(System.String)">
            <inheritdoc cref="M:ImagineBookStore.Core.Interfaces.IAuthService.Logout(System.String)"/>
        </member>
        <member name="T:ImagineBookStore.Core.Services.BookService">
            <summary>
            Implementation of book-related services.
            </summary>
        </member>
        <member name="M:ImagineBookStore.Core.Services.BookService.#ctor(ImagineBookStore.Model.App.BookStoreContext,ImagineBookStore.Model.Input.UserSession)">
            <summary>
            Initializes a new instance of the <see cref="T:ImagineBookStore.Core.Services.BookService"/> class.
            </summary>
            <param name="context">The database context for book information. See <see cref="T:ImagineBookStore.Model.App.BookStoreContext"/>.</param>
            <param name="userSession">The user session information. See <see cref="T:ImagineBookStore.Model.Input.UserSession"/>.</param>
        </member>
        <member name="M:ImagineBookStore.Core.Services.BookService.AddBook(ImagineBookStore.Model.Input.BookModel)">
            <inheritdoc cref="M:ImagineBookStore.Core.Interfaces.IBookService.AddBook(ImagineBookStore.Model.Input.BookModel)"/>
        </member>
        <member name="M:ImagineBookStore.Core.Services.BookService.DeleteBook(System.Int32)">
            <inheritdoc cref="M:ImagineBookStore.Core.Interfaces.IBookService.DeleteBook(System.Int32)"/>
        </member>
        <member name="M:ImagineBookStore.Core.Services.BookService.GetBook(System.Int32)">
            <inheritdoc cref="M:ImagineBookStore.Core.Interfaces.IBookService.GetBook(System.Int32)"/>
        </member>
        <member name="M:ImagineBookStore.Core.Services.BookService.ListBooks(ImagineBookStore.Model.Input.PagingOptionModel)">
            <inheritdoc cref="M:ImagineBookStore.Core.Interfaces.IBookService.ListBooks(ImagineBookStore.Model.Input.PagingOptionModel)"/>
        </member>
        <member name="M:ImagineBookStore.Core.Services.BookService.UpdateBook(System.Int32,ImagineBookStore.Model.Input.BookModel)">
            <inheritdoc cref="M:ImagineBookStore.Core.Interfaces.IBookService.UpdateBook(System.Int32,ImagineBookStore.Model.Input.BookModel)"/>
        </member>
        <member name="T:ImagineBookStore.Core.Services.CacheService">
            <summary>
            Implementation of caching service operations using an app cache.
            </summary>
        </member>
        <member name="M:ImagineBookStore.Core.Services.CacheService.#ctor(LazyCache.IAppCache)">
            <summary>
            Initializes a new instance of the <see cref="T:ImagineBookStore.Core.Services.CacheService"/> class.
            </summary>
            <param name="cache">The app cache implementation used for caching operations.</param>
        </member>
        <member name="M:ImagineBookStore.Core.Services.CacheService.AddToken(System.String,System.String,System.DateTime)">
            <inheritdoc cref="M:ImagineBookStore.Core.Interfaces.ICacheService.AddToken(System.String,System.String,System.DateTime)"/>
        </member>
        <member name="M:ImagineBookStore.Core.Services.CacheService.GetToken(System.String)">
            <inheritdoc cref="M:ImagineBookStore.Core.Interfaces.ICacheService.GetToken(System.String)"/>
        </member>
        <member name="M:ImagineBookStore.Core.Services.CacheService.RemoveToken(System.String)">
            <inheritdoc cref="M:ImagineBookStore.Core.Interfaces.ICacheService.RemoveToken(System.String)"/>
        </member>
        <member name="T:ImagineBookStore.Core.Services.CartService">
            <summary>
            Implementation of shopping cart service operations.
            </summary>
        </member>
        <member name="M:ImagineBookStore.Core.Services.CartService.#ctor(ImagineBookStore.Model.App.BookStoreContext,ImagineBookStore.Model.Input.UserSession)">
            <summary>
            Initializes a new instance of the <see cref="T:ImagineBookStore.Core.Services.CartService"/> class.
            </summary>
            <param name="context">The database context for shopping cart operations. See <see cref="T:ImagineBookStore.Model.App.BookStoreContext"/>.</param>
            <param name="userSession">The user session information. See <see cref="T:ImagineBookStore.Model.Input.UserSession"/>.</param>
        </member>
        <member name="M:ImagineBookStore.Core.Services.CartService.AddToCart(ImagineBookStore.Model.Input.CartModel)">
            <inheritdoc cref="M:ImagineBookStore.Core.Interfaces.ICartService.AddToCart(ImagineBookStore.Model.Input.CartModel)"/>
        </member>
        <member name="M:ImagineBookStore.Core.Services.CartService.ListCarts">
            <inheritdoc cref="M:ImagineBookStore.Core.Interfaces.ICartService.ListCarts"/>
        </member>
        <member name="M:ImagineBookStore.Core.Services.CartService.RemoveFromCart(System.Int32)">
            <inheritdoc cref="M:ImagineBookStore.Core.Interfaces.ICartService.RemoveFromCart(System.Int32)"/>
        </member>
        <member name="T:ImagineBookStore.Core.Services.OrderService">
            <summary>
            Implementation of order-related service operations.
            </summary>
        </member>
        <member name="M:ImagineBookStore.Core.Services.OrderService.#ctor(ImagineBookStore.Model.App.BookStoreContext,ImagineBookStore.Model.Input.UserSession,System.Net.Http.IHttpClientFactory,Microsoft.Extensions.Options.IOptions{ImagineBookStore.Model.Configurations.PasystackConfig})">
            <summary>
            Initializes a new instance of the <see cref="T:ImagineBookStore.Core.Services.OrderService"/> class.
            </summary>
            <param name="context">The database context for order-related operations. See <see cref="T:ImagineBookStore.Model.App.BookStoreContext"/>.</param>
            <param name="userSession">The user session information. See <see cref="T:ImagineBookStore.Model.Input.UserSession"/>.</param>
            <param name="httpClientFactory">The HTTP Client Factory used for communicating with Paystack API</param>
            <param name="paystackConfig">Paystack configuration from appsettings.json</param>
        </member>
        <member name="M:ImagineBookStore.Core.Services.OrderService.AttemptPayment(System.Int32)">
            <inheritdoc cref="M:ImagineBookStore.Core.Interfaces.IOrderService.AttemptPayment(System.Int32)"/>
        </member>
        <member name="M:ImagineBookStore.Core.Services.OrderService.ConfirmPayment(System.Int32)">
            <inheritdoc cref="M:ImagineBookStore.Core.Interfaces.IOrderService.ConfirmPayment(System.Int32)"/>
        </member>
        <member name="M:ImagineBookStore.Core.Services.OrderService.GetOrderItems(System.Int32)">
            <inheritdoc cref="M:ImagineBookStore.Core.Interfaces.IOrderService.GetOrderItems(System.Int32)"/>
        </member>
        <member name="M:ImagineBookStore.Core.Services.OrderService.ListOrders(ImagineBookStore.Model.Input.PagingOptionModel)">
            <inheritdoc cref="M:ImagineBookStore.Core.Interfaces.IOrderService.ListOrders(ImagineBookStore.Model.Input.PagingOptionModel)"/>
        </member>
        <member name="M:ImagineBookStore.Core.Services.OrderService.PlaceOrder">
            <inheritdoc cref="M:ImagineBookStore.Core.Interfaces.IOrderService.PlaceOrder"/>
        </member>
        <member name="M:ImagineBookStore.Core.Services.OrderService.InitiateTransaction(ImagineBookStore.Model.Paystack.InitiateTransactionModel)">
            <summary>
            Initiates a transaction with the payment provider.
            </summary>
        </member>
        <member name="M:ImagineBookStore.Core.Services.OrderService.VerifyTransaction(System.String)">
            <summary>
            Verifies a transaction with the payment provider.
            </summary>
        </member>
        <member name="T:ImagineBookStore.Core.Services.TokenGenerator">
            <summary>
            Class responsible for generating and invalidating JWT tokens for user authentication. <see cref="T:ImagineBookStore.Model.App.User"/>
            </summary>
        </member>
        <member name="M:ImagineBookStore.Core.Services.TokenGenerator.#ctor(Microsoft.Extensions.Options.IOptions{ImagineBookStore.Model.Configurations.JwtConfig},ImagineBookStore.Core.Interfaces.ICacheService)">
            <summary>
            Initializes a new instance of the <see cref="T:ImagineBookStore.Core.Services.TokenGenerator"/> class.
            </summary>
            <param name="jwtConfig">The JWT configuration options. See <see cref="T:Microsoft.Extensions.Options.IOptions`1"/>.</param>
            <param name="cacheService">The cache service for token storage. See <see cref="T:ImagineBookStore.Core.Interfaces.ICacheService"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when either jwtConfig or cacheService is null.</exception>
        </member>
        <member name="M:ImagineBookStore.Core.Services.TokenGenerator.GenerateJwtToken(ImagineBookStore.Model.App.User)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:ImagineBookStore.Core.Services.TokenGenerator.InvalidateToken(System.String)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:ImagineBookStore.Core.Services.TokenGenerator.GenerateAccessToken(ImagineBookStore.Model.App.User,System.DateTime)">
            <summary>
            Generates an access token for the specified user with the given expiration time.
            </summary>
            <param name="user">The user for whom the token is generated. See <see cref="T:ImagineBookStore.Model.App.User"/>.</param>
            <param name="expiresAt">The expiration time for the token. See <see cref="T:System.DateTime"/>.</param>
            <returns>The generated access token as a string.</returns>
        </member>
        <member name="T:ImagineBookStore.Core.Utilities.HttpUtilities">
            <summary>
            Utility class for HTTP-related operations.
            </summary>
        </member>
        <member name="M:ImagineBookStore.Core.Utilities.HttpUtilities.ToJsonContent(System.Object)">
            <summary>
            Converts an object to JSON content for HTTP requests.
            </summary>
            <param name="obj">The object to be serialized to JSON content.</param>
            <returns>An instance of <see cref="T:System.Net.Http.StringContent"/> representing JSON content.</returns>
        </member>
        <member name="T:ImagineBookStore.Core.Utilities.PrepDatabase">
            <summary>
            Utility class for preparing and populating the database with initial data.
            </summary>
        </member>
        <member name="M:ImagineBookStore.Core.Utilities.PrepDatabase.PrepPopulation(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Prepares and populates the database with initial data.
            </summary>
            <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> instance.</param>
        </member>
        <member name="M:ImagineBookStore.Core.Utilities.PrepDatabase.CreateFirstUserAsync(ImagineBookStore.Core.Interfaces.IAuthService)">
            <summary>
            Creates the first user in the system using the provided <see cref="T:ImagineBookStore.Core.Interfaces.IAuthService"/>.
            </summary>
            <param name="authService">The <see cref="T:ImagineBookStore.Core.Interfaces.IAuthService"/> instance.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:ImagineBookStore.Core.Utilities.PrepDatabase.SeedData(ImagineBookStore.Model.App.BookStoreContext)">
            <summary>
            Seeds the database with initial data, including roles, books, and carts.
            </summary>
            <param name="context">The <see cref="T:ImagineBookStore.Model.App.BookStoreContext"/> instance.</param>
        </member>
        <member name="T:ImagineBookStore.Core.Utilities.StaticErrorMessages">
            <summary>
            Static class containing static error messages used across the application.
            </summary>
        </member>
        <member name="F:ImagineBookStore.Core.Utilities.StaticErrorMessages.UnableToSaveChanges">
            <summary>
            Error message indicating the inability to save changes.
            </summary>
        </member>
    </members>
</doc>
