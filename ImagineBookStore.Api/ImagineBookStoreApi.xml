<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImagineBookStore.Api</name>
    </assembly>
    <members>
        <member name="M:ImagineBookStore.Api.Controllers.BaseController.ProcessResponse(ImagineBookStore.Core.Models.Utilities.Result)">
            <summary>
            Returns the appropriate HTTP Response.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="T:ImagineBookStore.Api.Controllers.BooksController">
            <summary>
            API controller for managing books in the application.
            </summary>
        </member>
        <member name="M:ImagineBookStore.Api.Controllers.BooksController.#ctor(ImagineBookStore.Core.Interfaces.IBookService)">
            <summary>
            Initializes a new instance of the <see cref="T:ImagineBookStore.Api.Controllers.BooksController"/> class.
            </summary>
            <param name="bookService">The book service to be injected.</param>
        </member>
        <member name="M:ImagineBookStore.Api.Controllers.BooksController.AddBook(ImagineBookStore.Core.Models.Input.BookModel)">
            <summary>
            Adds a new book to the application.
            </summary>
            <remarks>
            This endpoint adds a new book to the database, the title must be unique to the author. <br/>
            Requires an Admin role to access this.
            </remarks>
            <param name="model">This represents the book object to be added.</param>
            <response code="201">Returns the added book object.</response>
            <response code="400">Returns an error object indicating what went wrong.</response>
        </member>
        <member name="M:ImagineBookStore.Api.Controllers.BooksController.DeleteBook(System.Int32)">
            <summary>
            Delete a book
            </summary>
            <remarks>
             Deletes a book with the specified identifier. <br/>
            Requires an Admin role to access this.
            </remarks>
            <param name="bookId">The integer identifier of the book to be deleted.</param>
            <response code="200">Returns a successful message if deleted successfully.</response>
            <response code="404">Returns Not Found if book does not exist.</response>
        </member>
        <member name="M:ImagineBookStore.Api.Controllers.BooksController.GetBook(System.Int32)">
            <summary>
            Get a Book
            </summary>
            <remarks>
            Retrieves details of a book with the specified identifier.
            </remarks>
            <param name="bookId">The integer identifier of the book to be retrieved.</param>
            <response code="200">Returns the book object.</response>
            <response code="404">Returns Not Found if book does not exist.</response>
        </member>
        <member name="M:ImagineBookStore.Api.Controllers.BooksController.ListBooks(ImagineBookStore.Core.Models.Input.PagingOptionModel)">
            <summary>
            List Books
            </summary>
            <remarks>
            Lists books based on the provided paging options.
            </remarks>
            <param name="request">The <see cref="T:ImagineBookStore.Core.Models.Input.PagingOptionModel"/> containing the paging options.</param>
            <response code="200">Returns the list of books in a paginated format.</response>
        </member>
        <member name="M:ImagineBookStore.Api.Controllers.BooksController.UpdateBook(System.Int32,ImagineBookStore.Core.Models.Input.BookModel)">
            <summary>
            Update a Book details
            </summary>
            <remarks>
            Updates details of a book with the specified identifier. <br/>
            Requires an Admin role to access this.
            </remarks>
            <param name="bookId">The identifier of the book to be updated.</param>
            <param name="model">The object representing the updated details of the book.</param>
            <response code="200">Returns the updated book object.</response>
            <response code="404">Returns not found if book does not exist.</response>
        </member>
    </members>
</doc>
